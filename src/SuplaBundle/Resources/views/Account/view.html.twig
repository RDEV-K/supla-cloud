{% extends 'SuplaBundle::layout.html.twig' %}

{% block content %}


<svg version="1.1" id="user-account-bg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 610 593.8" style="enable-background:new 0 0 610 593.8;" xml:space="preserve">

<style type="text/css">
	.st0x{fill:none;stroke:#FFFFFF;stroke-width:2;stroke-miterlimit:10;}
	.st1x{fill:none;stroke:#FAFBFC;stroke-width:2;stroke-miterlimit:10;}
	.st2x{fill:#00D151;stroke:#FFFFFF;stroke-width:2;stroke-miterlimit:10;}
	.st3x{fill:none;stroke:#FAFBFC;stroke-width:2;stroke-miterlimit:10;}
	.st4x{stroke:#000000;stroke-width:2;stroke-miterlimit:10;fill:none}
</style>

<path id="XMLID_48_" class="st0x" d="M593.4,203.5H350.5L265.1,0H153l85.4,203.5H16.8c-5.5,0-10,4.5-10,10v362.5c0,5.5,4.5,10,10,10
	h576.6c5.5,0,10-4.5,10-10V213.5C603.4,208,598.9,203.5,593.4,203.5z M370.2,240.7H240c-2.8,0-5.1-2.3-5.1-5.1
	c0-2.8,2.3-5.1,5.1-5.1h130.1c2.8,0,5.1,2.3,5.1,5.1C375.3,238.4,373,240.7,370.2,240.7z"/>
<path id="XMLID_4_" class="st1x" d="M581.4,568.8H28.6c-1.7,0-3-1.3-3-3V261.1c0-1.7,1.3-3,3-3h552.9c1.7,0,3,1.3,3,3v304.7
	C584.4,567.5,583.1,568.8,581.4,568.8z"/>

<path id="XMLID_49_" class="st2x" d="M345.7,0L249,230.5c0.4,1.4,1.7,2.4,3.2,2.4H358c1.5,0,2.8-1,3.2-2.4h0L457.8,0H345.7z"/>
<line id="XMLID_2_" class="st3x" x1="51.3" y1="413.5" x2="553.3" y2="413.5"/>
<path id="XMLID_6_" class="st4x" d="M151.7,241.7H36.5c-6,0-11-4.9-11-11v0c0-6,4.9-11,11-11h115.2c6,0,11,4.9,11,11v0
	C162.7,236.8,157.7,241.7,151.7,241.7z"/>

<g id="XMLID_3_"></g>
<g id="XMLID_5_"></g>
<g id="XMLID_7_"></g>
<g id="XMLID_8_"></g>
<g id="XMLID_9_"></g>
<g id="XMLID_10_"></g>

</svg>


<span class="supla-member">supla member</span>
<div class="user-account" id="user-account">
		<h1>{{ user.email }}</h1>
		<ul class="user list-unstyled">
			<li>{% trans %}Previous login{% endtrans %} <strong>{% if user.lastlogin is null %}{{ user.currentlogin|date("Y-m-d H:i:s") }}{% else %}{{ user.lastlogin|date("Y-m-d H:i:s") }}{% endif %}</strong></li>
			<li>{% trans %}from IP{% endtrans %} <strong>{% if user.lastlogin is null %}{{ user.currentipv4 }}{% else %}{{ user.lastipv4 }}{% endif %}</strong></li>
			<li><a href="#" id="overlay-delete">{% trans %}Change Your Password{% endtrans %}</a></li>
            <li>
                <timezone-chooser inline-template>
                    <div>
                        <div v-if="!editingTimezone">
                            {% trans %}Your timezone{% endtrans %}: <strong>${ userTimezone }</strong>
                            <a @click="editTimezone()">{{ 'change'|trans }}</a>
                        </div>
                        <div v-if="editingTimezone">
                            <label>{% trans %}Choose your timezone{% endtrans %}</label>
                            <select v-model="userTimezone" ref="timezoneDropdown" class="form-control"
                                    @change="chooseTimezone()">
                                <option v-for="timezone in getAvailableTimezones()"
                                        v-bind:value="timezone.name">
                                    ${ timezone.name }
                                    (UTC${timezone.offset >= 0 ? '+' : ''}${timezone.offset})
                                    ${ timezone.currentTime }
                                </option>
                            </select>
                        </div>
                    </div>
                </timezone-chooser>
            </li>
            <li><a href="https://supla.org">supla.org</a></li>
		</ul>
		<span class="version-info">Aktualnie u≈ºywasz supla cloud w wersji 1.4.</span>
</div>


<div id="change_pwd_dialog" class="overlay-delete overlay-data">
	<div class="dialog">
		<h1>{% trans %}Change Password{% endtrans %}</h1>
		<div class="password-form">
		  <div class="form-group">
			<input type="password" class="form-control" id="old-password">
			<label for="old-password">{% trans %}Current Password{% endtrans %}</label>
		  </div>
		  <div class="form-group">
			<input type="password" class="form-control" id="new-password">
			<label for="new-password">{% trans %}New password{% endtrans %}</label>
		  </div>
		  <div class="form-group">
			<input type="password" class="form-control" id="confirm-password">
			<label for="confirm-password">{% trans %}Confirm Password{% endtrans %}</label>
		  </div>
		</div>
		<div class="controls">
			<a href="#" class="overlay-delete-close cancel">{% trans %}CANCEL{% endtrans %}</a>
			<a href="#" data-path="{{ path('_account_view') }}" id="change_pwd_btn" class="save green"><i class="pe-7s-check"></i></a></div>
		</div>
	</form>
</div>

<script src="{{ asset('assets/js/details.js') }}"></script>
<script>
    var mySVG = $('#user-account-bg').drawsvg({
    duration: 2000
    });
    mySVG.drawsvg('animate');
</script>
{% endblock %}
{% block styles %}
<link rel="stylesheet" href="{{ asset('assets/js/bootstrap-select/bootstrap-select.min.css') }}">
{% endblock %}
{% block scripts %}
    <script src="{{ asset('assets/js/vue.min.js') }}"></script>
    <script src="{{ asset('assets/js/momentjs/moment-with-locales.min.js') }}"></script>
    <script src="{{ asset('assets/js/momentjs/moment-timezone-with-data-2010-2020.js') }}"></script>
    <script src="{{ asset('assets/js/bootstrap-select/bootstrap-select.min.js') }}"></script>
    <script>
        var BASE_URL = '{{ path('_homepage') }}';
        var LOCALE = '{{ app.request.locale }}';
        var TIMEZONE = '{{ app.user.timezone }}';
        moment.locale(LOCALE);
        moment.tz.setDefault(TIMEZONE);
    </script>
    <script>
        var app = new Vue({
            el: '#user-account',
            delimiters: ['${', '}'], // defaults conflict with twig delimiters, http://stackoverflow.com/a/33935750/878514
            components: {
                'timezone-chooser': {
                    data: function () {
                        return {
                            editingTimezone: false,
                            userTimezone: undefined
                        };
                    },
                    mounted: function () {
                        if (TIMEZONE) {
                            this.userTimezone = TIMEZONE;
                            moment.tz.setDefault(this.userTimezone);
                        } else {
                            this.userTimezone = moment.tz.guess();
                            this.chooseTimezone();
                        }
                    },
                    methods: {
                        editTimezone: function () {
                            this.editingTimezone = true;
                            var self = this;
                            setTimeout(function () {
                                $(self.$refs.timezoneDropdown).selectpicker({liveSearch: true});
                            });
                        },
                        chooseTimezone: function () {
                            $(this.$refs.timezoneDropdown).selectpicker('destroy');
                            this.editingTimezone = false;
                            moment.tz.setDefault(this.userTimezone);
                            $.ajax({
                                method: 'PUT',
                                data: {timezone: this.userTimezone},
                                url: BASE_URL + 'account/user-timezone'
                            })
                        },
                        getAvailableTimezones: function () {
                            return moment.tz.names().filter(function (timezone) {
                                return timezone.match(/^(America|Antartica|Arctic|Asia|Atlantic|Europe|Indian|Pacific)\//);
                            }).map(function (timezone) {
                                return {
                                    name: timezone,
                                    offset: moment.tz(timezone).utcOffset() / 60,
                                    currentTime: moment.tz(timezone).format('H:mm')
                                }
                            }).sort(function (timezone1, timezone2) {
                                if (timezone1.offset == timezone2.offset) {
                                    return timezone1.name < timezone2.name ? -1 : 1;
                                } else {
                                    return timezone1.offset - timezone2.offset
                                }
                            });
                        }
                    }
                }
            }
        });
    </script>
{% endblock %}
